(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{253:function(n,t){n.exports={html:'<p>使用 markdown 来给程序写文档是非常方便的，自从用顺了 markdown 之后，都很久没打开过 Word 了。</p>\n<p>既然是程序的文档，少不了需要插入一些示例代码，而对代码进行语法高亮渲染并配以合适的颜色主题，会让文档显得更炫，也更便于阅读。</p>\n<p>要实现文档代码高亮渲染其实并不难。</p>\n<h3 id="实现方法"><a class="header-anchor" href="#实现方法">#</a> 实现方法</h3>\n<p>首先，把 markdown 文件加载为 vue 组件，这需要一个合适的 loader，自己目前使用 <code>vue-markdown-loader</code>。webpack 配置的 <code>module.rules</code> 中进行如下配置：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token punctuation">{</span>\n    test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.md$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n    loader<span class="token operator">:</span> <span class="token string">\'vue-markdown-loader\'</span><span class="token punctuation">,</span>\n    options<span class="token operator">:</span> <span class="token punctuation">{</span>\n        preset<span class="token operator">:</span> <span class="token string">\'default\'</span><span class="token punctuation">,</span>\n        breaks<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n        preventExtract<span class="token operator">:</span> <span class="token boolean">true</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>然后就可以在项目中直接 import md 文件了。比如：</p>\n\x3c!--beforebegin--\x3e<div class="language-html extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>MyMarkdown</span><span class="token punctuation">/></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    components<span class="token operator">:</span> <span class="token punctuation">{</span>\n        <span class="token string">\'MyMarkdown\'</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'xxx.md\'</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>当然，通常情况下，我们会与 vue-router 一起使用，把 md 文件作为一个视图组件加载到 <code>router-view</code> 中去。</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">\'path/home\'</span><span class="token punctuation">,</span>\n    <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'../markdown/home.md\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>看到这里可能奇怪，这些与文题中提到的 highlight.js 有毛关系？这是因为，vue-markdown-loader 中已经内置了对代码高这的支持。你只需要在页面中引入相关的样式，例如：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token keyword">import</span> <span class="token string">\'highlight.js/styles/atom-one-dark.css\'</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>然后主可以看到代码高亮的效果，通常是这样的。</p>\n<p><img src="./%E4%B8%80%E8%88%AC%E6%95%88%E6%9E%9C.png" alt=""></p>\n<p>看起来还不错，但这样的高亮有个问题，那就是他的背景色并不随着你所加载了 highlight.js 主题样式而改变，而且不同语言的代码在配色上的一些差异也没有很好的渲染出来。而从 highlight.js 官网示例可以看到，这些问题本不应该出现的。</p>\n<p>为了实现与 highlight.js 官网示例中的主题效果，可以在页面中自己完成代码高亮的渲染。</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code><span class="token operator">&lt;</span>script<span class="token operator">></span>\n<span class="token keyword">import</span> hljs <span class="token keyword">from</span> <span class="token string">\'highlight.js\'</span>\n<span class="token keyword">import</span> <span class="token string">\'highlight.js/styles/atom-one-dark.css\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">highlightCode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> preEl <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">\'pre\'</span><span class="token punctuation">)</span>\n\n  preEl<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">el</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    hljs<span class="token punctuation">.</span><span class="token function">highlightBlock</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    <span class="token function">mounted</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">highlightCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n    <span class="token function">updated</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">highlightCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>可以看到，代码中使用了 highlight.js 的 <code>highlightBlock()</code> 方法而不是官方默认示例里提到的 <code>initHighlighting()</code>，因为后者一般用于<strong>静态页面</strong>的渲染。如果使用它，当使用 vue-router 导航到一个新的‘页面’之后，新页面中的代码块可能无法被正确渲染。这也是为什么在 updated 钩子中再次调用 <code>highlightCode()</code>的原因。（实际上自己在此坑了很久，查阅不少文档才找到这一原因）</p>\n<p>做完这些之后再看渲染效果：</p>\n<p><img src="./%E6%B8%B2%E6%9F%93%E6%95%88%E6%9E%9C.png" alt="渲染效果"></p>\n<p>果然好多了！</p>\n<h3 id="后记"><a class="header-anchor" href="#后记">#</a> 后记</h3>\n<p>既然是自己渲染代码高亮，那么其实 loader 中对代码块块的处理就不必要或者显得有点儿多余了，因为这些处理会增加一些计算量。所以你也可以找一些别的 loader 来替代 vue-markdown-loader,甚至尝试自己写一个 loader。</p>\n<p>对于一个软件，官方文档是有必要仔细读的，就像前面提到的 highlight.js 中 <code>initHighlighting()</code> 方法的问题，其实在官方文档中也有解释。</p>\n',attributes:{title:"highlight.js 在 Vue 中使用的一点儿经验",date:"2019-03-10T16:42:07.000Z",top_img:"./top_img.jpg",tags:["vue","highlight.js"],categories:["js","vue"]}}}}]);