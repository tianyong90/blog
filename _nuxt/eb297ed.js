(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{218:function(n,e){n.exports={html:'<p>我在前几天刚写过的<a href="https://tianyong90.com/2019/04/12/rang-f5-xie-yi-hui-er-laravel-mix-zi-dong-shua-xin-zhi-dao/">《让 F5 歇一会儿——laravel-mix 自动刷新之道》</a>中介绍了 laravel-mix 实现自动刷新的几种方法，其中就有涉及 hmr（Hot Module Replacement），但里面都是以 Laradock 环境为例。对于 Laravel 官方首推的 Homestead 当然也是可以的，只不过用法上有些差别，于加上 laravel-mix 本身的一些 BUG（在 issue 里搜索 <code>hmr</code> 结果就有好几页 😄），对于刚接触的人来说可能无从下手。</p>\n<p>本文介绍两种不同的玩法。</p>\n<blockquote>\n<p>首先假定你已经创建了一个 laravel 项目，进行了相关配置（.env 配置及绑定测试域名，如：laravel.test）并已装好了后端依赖</p>\n</blockquote>\n<h2 id="玩法一：使用虚拟机中的-node-环境"><a class="header-anchor" href="#玩法一：使用虚拟机中的-node-环境">#</a> 玩法一：使用虚拟机中的 Node 环境</h2>\n<p>因为 Homestead 提供的环境里默认包含了前端开发所需要的 Node 环境及相关工具（gulp, npm, yarn 等），所以直接使用它们似乎是很省事的选择。</p>\n<p><img src="./%E6%96%B9%E6%B3%951.png" alt="玩法一示意图"></p>\n<ol>\n<li>\n<p><code>vagrant ssh</code> 连接虚拟机，进入项目目录后安装前端依赖</p>\n\x3c!--beforebegin--\x3e<div class="language-bash extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">install</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e</li>\n<li>\n<p>在 webpack.mix.js 中调整相关配置</p>\n<ul>\n<li>\n<p>使用 mix.Webpack() 配置 devServer</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>mix<span class="token punctuation">.</span><span class="token function">webpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        watchOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n            poll<span class="token operator">:</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token comment">// 这个值可调整，性能高的时候可以调小，也可以直接设置为 true</span>\n            ignored<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e</li>\n</ul>\n<blockquote>\n<p>这一配置很关键，因为要是仅使用 devServer 的默认 watch 选项，对于虚拟机环境是无效的（<a href="https://webpack.js.org/configuration/watch/#watchoptionspoll">见 webpack 文档</a>）</p>\n</blockquote>\n<ul>\n<li>\n<p>调整 hmrOptions</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>mix<span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    hmrOptions<span class="token operator">:</span> <span class="token punctuation">{</span>\n        host<span class="token operator">:</span> <span class="token string">\'laravel.test\'</span><span class="token punctuation">,</span>\n        port<span class="token operator">:</span> <span class="token number">8080</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e</li>\n</ul>\n</li>\n<li>\n<p>在<strong>虚拟机</strong>终端中执行<code>yarn run hot</code>，然后在浏览器中使用绑定的测试域名（如：laravel.test）访问</p>\n</li>\n<li>\n<p>修改 JS 等，自动编译后浏览器中页面即自动更新</p>\n</li>\n</ol>\n<h2 id="玩法二：使用宿主机中的-node-环境"><a class="header-anchor" href="#玩法二：使用宿主机中的-node-环境">#</a> 玩法二：使用宿主机中的 Node 环境</h2>\n<p>当然也可以使用宿主机的 Node 环境，对于开发都来说，这些环境应该也是必须的了。</p>\n<p><img src="./%E6%96%B9%E6%B3%952.png" alt="玩法二示意图"></p>\n<ol>\n<li>\n<p>从宿主机终端进入项目目录并安装前端依赖</p>\n\x3c!--beforebegin--\x3e<div class="language-bash extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">install</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e</li>\n<li>\n<p>webpack.mix.js 中使用 webpackConfig 进行配置</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>mix<span class="token punctuation">.</span><span class="token function">webpackConfig</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    devServer<span class="token operator">:</span> <span class="token punctuation">{</span>\n        disableHostCheck<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token comment">// 其它配置</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<blockquote>\n<p>disableHostCheck: true 是为了避免出现下面这种错误。</p>\n</blockquote>\n<p><img src="./error.png" alt="错误截图"></p>\n<blockquote>\n<p>与玩法一中不一样，不再需要特别在 hmrOptions 中指定 devServer 和 host 和 port，使用默认的就好（事实上也<strong>不能</strong>像前面那样指定，因为会出现 IP/端口 冲突）</p>\n</blockquote>\n</li>\n<li>\n<p>在宿主机终端中执行<code>yarn run hot</code>，然后在浏览器中使用绑定的测试域名（如：laravel.test）访问</p>\n</li>\n<li>\n<p>修改 JS 等，自动编译后浏览器中页面即自动更新</p>\n</li>\n</ol>\n<p><strong>laravel-mix 4.0.16 中修复了在 windows 中使用 hmr 的 BUG，开发体验相较以前更好。https://github.com/JeffreyWay/laravel-mix/pull/1995</strong></p>\n<h2 id="总结"><a class="header-anchor" href="#总结">#</a> 总结</h2>\n<p>两种方法并没有谁好谁坏之分，具体使用哪种方法视具体场景及个人喜好而定。就我个人而言，通常使用第二种，主要原因有二：</p>\n<ul>\n<li>\n<p>一是出于性能/延迟方面的考虑，因为在虚拟机中使用轮询（poll）的方式来监听文件变化，当 poll 设置间隔较大时可能会出现一定延迟，而设置太小轮询太频繁则又可能造成一定的性能压力。所以直接使用宿主机的 Node 环境似乎更为划算。</p>\n</li>\n<li>\n<p>二是自己使用的 IDE（PhpStorm）运行在宿主机（Windows）中，而 PhpStorm 的一些插件（或服务）如 Eslint、TypeScript、 Prettier 需要使用使用本地安装的一些 npm 包，这样就只能在宿主环境里安装依赖。（虽然可以考虑在宿主机全局安装依赖，但诸如 eslint-config-xxx 之类的项目相关的包也全局安装，必然造成混乱）</p>\n</li>\n</ul>\n<p>如同学习很多其它新工具新玩法一样，刚开始折腾 laravel-mix 时总是磕磕绊绊(有不少坑），但一旦掌握了窍门，就能极大的方便日常开发，提高工作效率。博客里记下这些，权当备忘，也算是分享，独乐不如众乐。</p>\n',attributes:{title:"Homestead + laravel-mix 环境下 hmr 的两种玩法",date:"2019-04-18T01:33:24.000Z",top_img:"./top_img.png",tags:["laravel-mix","homestead","hmr"],categories:["前端","webpack"]}}}}]);