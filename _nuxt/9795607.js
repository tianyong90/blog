(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{270:function(n,t){n.exports={html:'<p><a href="https://tianyong90.com/">博客地址: https://tianyong90.com</a></p>\n<p><a href="https://github.com/tianyong90/blog">github 仓库地址:https://github.com/tianyong90/blog</a></p>\n<p>其实自己的博客上线没多久，之前闲时会写些乱七八糟的玩意儿，一来当作总结和备忘，二来分享一些个人经验，也是种很有趣的经历。然后几个月前，想着自己手里有个注册但闲置很久的域名，又正好有台服务器，就干脆折腾个博客。</p>\n<p>不就是个博客嘛？能有多难？也没多想就用了之前使用过的 Hexo 撸了起来，只花了一晚上就弄上线了。不过上线一时爽，维护火葬场。之后花上它上面的时间要远多于此，因为 hexo 如果想要充分的自定义模板或者功能，还是很麻烦的，特别是因为模板用的 pug 以及写样式用的 stylus 都是自己不擅长且不太喜欢的语言。几番折腾下来总不得劲，终于心一横，不如重构吧。</p>\n<p>重构时要比当初选择 hexo 时要谨慎多了，对比了下自己了解的一些工具，最终选择了 Nuxt.js。</p>\n<h2 id="为什么是-nuxt-js？"><a class="header-anchor" href="#为什么是-nuxt-js？">#</a> 为什么是 Nuxt.js？</h2>\n<p>最主要的原因就是自己用 Vue 很久了，学 Nuxt 的成本也就小得多。Nuxt 可以让我用最熟悉的姿势来写代码，同时又能解决博客在静态化、SEO 等方面的一些要求，它的布局、自动路由、插件、中间件等特性让我大有相见恨晚的感觉。</p>\n<p>其实在作决定之前也试过 Vuepress，但 Vuepress 的出发点是文档类的站，并不太适合写博客。虽然 1.0 版中加入了博客的支持，但目前仍在 alpha 阶段，体验不太好，更新进度又不理想，等到正式稳定可用的版本出来，估计黄花菜也凉了。</p>\n<p>此外也考虑过用 hugo，甚至想过用 Laravel 来弄。但 hugo 基于 Go，自己完全不懂，而用 Laravel 写博客似乎大材小用了，毕竟我只需要一个静态的小站，也不会给服务器增加多少压力。</p>\n<h2 id="具体实施"><a class="header-anchor" href="#具体实施">#</a> 具体实施</h2>\n<ol>\n<li>创建 nuxt 项目并进行基础配置</li>\n</ol>\n<p>首先当然是创建项目，根据 Nuxt 文档使用 <code>yarn create nuxt-app</code> 命令创建一个新项目，根据需要配置好 eslint、typescript 等。</p>\n<ol start="2">\n<li>确定目录结构（路由）、文章文件名命名规范</li>\n</ol>\n<p>因为之前用 hexo 部署的也是纯静态的站，只要之前所部署的旧文件不删除，那么使用原来的链接仍然能访问旧版的文章。所以也不用太纠结重构后路由的变化。当然这并不意味着不需要进行规划。</p>\n<p>为此，我新建了一个 posts 目录，用于保存 markdown 文件，文件夹内建与 markdown 文件同名的文件夹用来存文章中用到的图片等。</p>\n\x3c!--beforebegin--\x3e<div class="language- extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-text"><code>-| posts/\n----| hello-中国/\n----| hello-中国.md\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<blockquote>\n<p>这里要注意一下的是，文件名将一些特殊字符和空格替换成了连词符，而实际访问用的路由是将文件名拼音化。为什么不直接用拼音化文件名或者英文呢？主要是方便日后管理。</p>\n</blockquote>\n<p>然后在 <code>pages</code> 目录下创建 <code>psots/_slug.vue</code> 页面。这样文章就可以用 https://tianyong90.com/psots/hello-zhong-guo 这样形式来访问了。</p>\n<ol start="3">\n<li>安装并配置 <a href="https://github.com/tianyong90/vue-markdown-loader">@tianyong90/vue-markdown-loader</a></li>\n</ol>\n<p><a href="https://github.com/tianyong90/vue-markdown-loader">@tianyong90/vue-markdown-loader</a> 是自己之前从 vuepress 中提取的 markdown-loader 部分代码改写出来的一个 webpack loader。它的主要功能是加载 markdown 文件，进行一些处理，如解析 emoji、代码高亮等，最后返回可以供 vue-loader 的内容。最近又进一步优化，让它可以返回 html 而被  html-loader 处理，或者直接返回一个包含 markdown 文件信息的对象。</p>\n<p>配置如下：</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>build<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token function">extend</span><span class="token punctuation">(</span><span class="token parameter">config<span class="token punctuation">,</span> ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// frontmatter-markdown-loader</span>\n    config<span class="token punctuation">.</span>module<span class="token operator">!</span><span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\\.md$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>\n      include<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'posts\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n      use<span class="token operator">:</span> <span class="token punctuation">[</span>\n        <span class="token punctuation">{</span>\n          loader<span class="token operator">:</span> <span class="token string">\'@tianyong90/vue-markdown-loader\'</span><span class="token punctuation">,</span>\n          options<span class="token operator">:</span> <span class="token punctuation">{</span>\n            mode<span class="token operator">:</span> <span class="token string">\'raw\'</span><span class="token punctuation">,</span> <span class="token comment">// 这里表示 import md 文件后直接返回一个对象</span>\n            contentCssClass<span class="token operator">:</span> <span class="token string">\'markdown-body\'</span><span class="token punctuation">,</span>\n            markdown<span class="token operator">:</span> <span class="token punctuation">{</span>\n              lineNumbers<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// enable line numbers</span>\n            <span class="token punctuation">}</span><span class="token punctuation">,</span>\n          <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<ol start="4">\n<li>文章页的一些处理</li>\n</ol>\n<p>有了前面的这些，就可以开始动手处理文章页了，这也是博客的关键部分。而其中最为重要的工作就是根据 url 中拼音化的文章标题正确加载 posts 目录中的 markdown 链接半渲染显示，这些基本都在 asyncData 方法中完成。</p>\n\x3c!--beforebegin--\x3e<div class="language-ts extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-ts"><code><span class="token keyword">async</span> <span class="token function">asyncData</span><span class="token punctuation">(</span><span class="token punctuation">{</span> params <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 这里的 posts.json 是用脚本生成的保存 posts 目录中文章列表信息的</span>\n  <span class="token comment">// 相当于一个小的数据库</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">default</span><span class="token operator">:</span> posts <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">\'~/posts/posts.json\'</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// 链接中拼音化的文件名</span>\n  <span class="token keyword">const</span> slugifiedFilename <span class="token operator">=</span> params<span class="token punctuation">.</span>slug\n\n  <span class="token keyword">const</span> thePost<span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> item<span class="token punctuation">.</span>slugifiedFilename <span class="token operator">===</span> slugifiedFilename\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// posts 目录中 markdown 实际文件名</span>\n  <span class="token keyword">const</span> filename <span class="token operator">=</span> thePost<span class="token punctuation">.</span>filename\n\n  <span class="token comment">// 解析渲染都交给前面提到的 @tianyong90/vue-markdown-loader 完成</span>\n  <span class="token comment">// 这里的 html 就是渲染出来的 html,可以直接应用于 v-html 指令</span>\n  <span class="token comment">// attributes 则是 markdown 文件头部的 frontmatter 数据如标题、日期等</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> html<span class="token punctuation">,</span> attributes <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">~/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.md</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>attributes<span class="token punctuation">,</span>\n    html<span class="token operator">:</span> html<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">src="\\.\\/</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">src="/_nuxt/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// markdown 内容中图片地址引用替换</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>然后在模板中显示这些数据，其中 html 使用 v-html 指令就可以了。</p>\n\x3c!--beforebegin--\x3e<div class="language-html extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>container-fluid py-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row post-info-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-title<span class="token punctuation">"</span></span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post-date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ date }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>row<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>col-xs-12 col-md-10 col-xl-6 mx-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>markdown-body<span class="token punctuation">"</span></span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>html<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<ol start="5">\n<li>布局、样式等细节</li>\n</ol>\n<p>博客并不只是文字内容，因此还需要在布局、样式等方面下些功夫。因为自己设计水平实在有限，所以直接使用了 bootstrap 和 github-markdown-css，撸完文章列表页以及文章内容页就够用了，其它的页面看需要再加吧。</p>\n<ol start="6">\n<li>生成、部署以及自动化</li>\n</ol>\n<p>最后要生成静态页，而博客所使用的又是动态路由，就需要在 nuxt.config.js 中的 genarate 荐中进行配置。</p>\n<p>如下，根据当前 posts 目录下的 markdown 文件名来确定该生成哪些页面。</p>\n\x3c!--beforebegin--\x3e<div class="language-js extra-class">\x3c!--afterbegin--\x3e<pre v-pre class="language-js"><code>generate<span class="token operator">:</span> <span class="token punctuation">{</span>\n  routes<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'404\'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">post</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>post<span class="token punctuation">.</span>slugifiedFilename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\n</code></pre>\n\x3c!--beforeend--\x3e</div>\x3c!--afterend--\x3e<p>执行 <code>yarn run generate</code> 后可以看到下面的结果，<code>dist</code> 目录里也出现了静态文件，剩下的就只是部署了。</p>\n<p><img src="./generate-result.png" alt=""></p>\n<p>对于部署，配置上 Circle CI，当推关新内容上 master 分支时由 CI 进行构建并部署到自己服务器简直不能更爽。</p>\n<p>此外，为了省事，还写了几个脚本来创建新的 markdown 文件和相应的文件夹，虽然这也不是必须的，但使用脚本显然要比手动创建要省事得多。</p>\n<h2 id="总结"><a class="header-anchor" href="#总结">#</a> 总结</h2>\n<p>Nuxt.js 确实是个好东西，写了近三年 Vue 了才开始盘它，确实是有点儿迟了。Nuxt 利用 SSR 等机制能很好地弥补 SPA 应用在 SEO 等方面的不足，其自带的生成静态站的功能也非常适合平时写一些博客之类的应用。</p>\n<p>感谢 Hexo 陪伴多年（虽然期间也没用它写出什么东西来），但以后可能不会再用它了…… 😄</p>\n',attributes:{title:"绳命在于折腾，我用 Nuxt.js 重构了博客",date:"2019-05-26T03:11:46.000Z",top_img:"./top_img.png",tags:["博客","Nuxt.js"],categories:["Vue"]}}}}]);